import { JSONSchema, JSONPointer, JSONError } from "../types";
export default class CoreInterface {
    __rootSchema: JSONSchema;
    errors: any;
    typeKeywords: any;
    validateFormat: any;
    validateKeyword: any;
    validateType: any;
    constructor(schema?: JSONSchema);
    get rootSchema(): JSONSchema;
    set rootSchema(rootSchema: JSONSchema);
    each(data: any, callback: any, schema?: JSONSchema, pointer?: JSONPointer): void;
    validate(data: any, schema?: JSONSchema, pointer?: JSONPointer): Array<JSONError>;
    isValid(data: any, schema?: JSONSchema, pointer?: JSONPointer): boolean;
    resolveAnyOf(data: any, schema: JSONSchema, pointer?: JSONPointer): JSONSchema;
    resolveAllOf(data: any, schema: JSONSchema, pointer?: JSONPointer): JSONSchema;
    resolveRef(schema: JSONSchema): JSONSchema;
    resolveOneOf(data: any, schema: JSONSchema, pointer?: JSONPointer): JSONSchema;
    getSchema(pointer: JSONPointer, data: any, schema?: JSONSchema): void;
    getTemplate(data: any, schema?: JSONSchema): void;
    setSchema(schema: JSONSchema): void;
    step(key: string | number, schema: JSONSchema, data: any, pointer?: JSONPointer): JSONSchema;
}
